/************************************************************

    Following is the Binary Tree node structure:

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };


************************************************************/
#include<bits/stdc++.h>

vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    // Write your code here.
    vector<int> preorder, inorder, postorder;
    vector<vector<int>> v;
    if(root == NULL) {
        return v;
    }
    stack<pair<BinaryTreeNode<int>*, int>> st;
    st.push({root, 1});
    while(!st.empty()) {
        auto node = st.top();
        st.pop();
        
        if(node.second == 1) {
            preorder.push_back(node.first->data);
            node.second++;
            st.push(node);
            if(node.first->left!= NULL)
                st.push({node.first->left,1});
        }
        else if(node.second == 2) {
            inorder.push_back(node.first->data);
            node.second = 3;
            st.push(node);
            if(node.first->right != NULL)
                st.push({node.first->right,1});
        }
        else{
            postorder.push_back(node.first->data);
            
        }
    }
    
    v.push_back(inorder);
    v.push_back(preorder);
    v.push_back(postorder);
    
}
